{"version":3,"file":"index.js","sources":["../src/index.tsx"],"sourcesContent":["// creating 9 * 9 random suduko game\n\nfunction shiftArray(arr: number[], shiftBy: number) {\n  let result = new Array(arr.length);\n  for (let i = 0; i < arr.length; i++) {\n    result[(i + shiftBy) % arr.length] = arr[i];\n  }\n  return result;\n}\n\nfunction shuffleArray<T>(array: T[]): T[] {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n}\n\nconst createRandomCorrectBoard = () => {\n  let array2D: number[][] = new Array(9);\n  array2D[0] = shuffleArray([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\n  for (let i = 1; i < 9; i++) {\n    if (i === 3 || i === 6) {\n      // Shift by 1 for 4th and 7th lines\n      array2D[i] = shiftArray(array2D[i - 1], 1);\n    } else {\n      // Shift by 3 for other lines\n      array2D[i] = shiftArray(array2D[i - 1], 3);\n    }\n  }\n\n  return array2D;\n};\n\nconst hideElements = (\n  grid: number[][],\n  difficulty: 'Default' | 'Easy' | 'Medium' | 'Hard' | 'Evil' | 'Impossible',\n): number[][] => {\n  let cellsToHide: number;\n  switch (difficulty) {\n    case 'Easy':\n      cellsToHide = 30; // Adjust this number for easy difficulty\n      break;\n    case 'Medium':\n      cellsToHide = 40; // Adjust this number for medium difficulty\n      break;\n    case 'Hard':\n      cellsToHide = 50; // Adjust this number for difficult difficulty\n      break;\n    default:\n      cellsToHide = 60; // Default to easy difficulty\n      break;\n  }\n\n  // Flatten the 2D grid to a 1D array for easier manipulation\n  const flatGrid = grid.flat();\n\n  // Randomly select cells to hide\n  const cellsIndices = shuffleArray(Array.from(Array(81).keys()));\n  for (let i = 0; i < cellsToHide; i++) {\n    flatGrid[cellsIndices[i]] = 0; // Set cell value to 0 (empty)\n  }\n\n  // Convert the modified 1D array back to a 2D grid\n  const modifiedGrid: number[][] = [];\n  for (let i = 0; i < flatGrid.length; i += 9) {\n    modifiedGrid.push(flatGrid.slice(i, i + 9));\n  }\n\n  return modifiedGrid;\n};\n\nexport function createBoard(\n  difficulty: 'Default' | 'Easy' | 'Medium' | 'Hard' | 'Evil' | 'Impossible',\n): {\n  grid: number[][];\n  solution: number[][];\n} {\n  const sudukoBoardEmpty = createRandomCorrectBoard();\n  const grid = hideElements(sudukoBoardEmpty, difficulty);\n  return {grid: grid, solution: sudukoBoardEmpty};\n}\n"],"names":["shiftArray","arr","shiftBy","result","Array","length","i","shuffleArray","array","shuffledArray","concat","j","Math","floor","random","_ref","createRandomCorrectBoard","array2D","hideElements","grid","difficulty","cellsToHide","flatGrid","flat","cellsIndices","from","keys","modifiedGrid","push","slice","createBoard","sudukoBoardEmpty","solution"],"mappings":"AAEA,SAASA,UAAUA,CAACC,GAAa,EAAEC,OAAe;EAChD,IAAIC,MAAM,GAAG,IAAIC,KAAK,CAACH,GAAG,CAACI,MAAM,CAAC;EAClC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,GAAG,CAACI,MAAM,EAAEC,CAAC,EAAE,EAAE;IACnCH,MAAM,CAAC,CAACG,CAAC,GAAGJ,OAAO,IAAID,GAAG,CAACI,MAAM,CAAC,GAAGJ,GAAG,CAACK,CAAC,CAAC;;EAE7C,OAAOH,MAAM;AACf;AAEA,SAASI,YAAYA,CAAIC,KAAU;EACjC,IAAMC,aAAa,MAAAC,MAAA,CAAOF,KAAK,CAAC;EAChC,KAAK,IAAIF,CAAC,GAAGG,aAAa,CAACJ,MAAM,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACjD,IAAMK,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAIR,CAAC,GAAG,CAAC,CAAC,CAAC;IAAC,IAAAS,IAAA,GACP,CAACN,aAAa,CAACE,CAAC,CAAC,EAAEF,aAAa,CAACH,CAAC,CAAC,CAAC;IAA1EG,aAAa,CAACH,CAAC,CAAC,GAAAS,IAAA;IAAEN,aAAa,CAACE,CAAC,CAAC,GAAAI,IAAA;;EAErC,OAAON,aAAa;AACtB;AAEA,IAAMO,wBAAwB,GAAG,SAA3BA,wBAAwBA;EAC5B,IAAIC,OAAO,GAAe,IAAIb,KAAK,CAAC,CAAC,CAAC;EACtCa,OAAO,CAAC,CAAC,CAAC,GAAGV,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAEtD,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1B,IAAIA,CAAC,KAAK,CAAC,IAAIA,CAAC,KAAK,CAAC,EAAE;MAEtBW,OAAO,CAACX,CAAC,CAAC,GAAGN,UAAU,CAACiB,OAAO,CAACX,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;KAC3C,MAAM;MAELW,OAAO,CAACX,CAAC,CAAC,GAAGN,UAAU,CAACiB,OAAO,CAACX,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;;;EAI9C,OAAOW,OAAO;AAChB,CAAC;AAED,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAChBC,IAAgB,EAChBC,UAA0E;EAE1E,IAAIC,WAAmB;EACvB,QAAQD,UAAU;IAChB,KAAK,MAAM;MACTC,WAAW,GAAG,EAAE;MAChB;IACF,KAAK,QAAQ;MACXA,WAAW,GAAG,EAAE;MAChB;IACF,KAAK,MAAM;MACTA,WAAW,GAAG,EAAE;MAChB;IACF;MACEA,WAAW,GAAG,EAAE;MAChB;;EAIJ,IAAMC,QAAQ,GAAGH,IAAI,CAACI,IAAI,EAAE;EAG5B,IAAMC,YAAY,GAAGjB,YAAY,CAACH,KAAK,CAACqB,IAAI,CAACrB,KAAK,CAAC,EAAE,CAAC,CAACsB,IAAI,EAAE,CAAC,CAAC;EAC/D,KAAK,IAAIpB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGe,WAAW,EAAEf,CAAC,EAAE,EAAE;IACpCgB,QAAQ,CAACE,YAAY,CAAClB,CAAC,CAAC,CAAC,GAAG,CAAC;;EAI/B,IAAMqB,YAAY,GAAe,EAAE;EACnC,KAAK,IAAIrB,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGgB,QAAQ,CAACjB,MAAM,EAAEC,EAAC,IAAI,CAAC,EAAE;IAC3CqB,YAAY,CAACC,IAAI,CAACN,QAAQ,CAACO,KAAK,CAACvB,EAAC,EAAEA,EAAC,GAAG,CAAC,CAAC,CAAC;;EAG7C,OAAOqB,YAAY;AACrB,CAAC;SAEeG,WAAWA,CACzBV,UAA0E;EAK1E,IAAMW,gBAAgB,GAAGf,wBAAwB,EAAE;EACnD,IAAMG,IAAI,GAAGD,YAAY,CAACa,gBAAgB,EAAEX,UAAU,CAAC;EACvD,OAAO;IAACD,IAAI,EAAEA,IAAI;IAAEa,QAAQ,EAAED;GAAiB;AACjD;;;;"}