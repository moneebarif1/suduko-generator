{"version":3,"file":"index.modern.js","sources":["../src/index.tsx"],"sourcesContent":["// creating 9 * 9 random suduko game\n\nfunction shiftArray(arr: number[], shiftBy: number) {\n  let result = new Array(arr.length);\n  for (let i = 0; i < arr.length; i++) {\n    result[(i + shiftBy) % arr.length] = arr[i];\n  }\n  return result;\n}\n\nfunction shuffleArray<T>(array: T[]): T[] {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n}\n\nconst createRandomCorrectBoard = () => {\n  let array2D: number[][] = new Array(9);\n  array2D[0] = shuffleArray([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\n  for (let i = 1; i < 9; i++) {\n    if (i === 3 || i === 6) {\n      // Shift by 1 for 4th and 7th lines\n      array2D[i] = shiftArray(array2D[i - 1], 1);\n    } else {\n      // Shift by 3 for other lines\n      array2D[i] = shiftArray(array2D[i - 1], 3);\n    }\n  }\n\n  return array2D;\n};\n\nconst hideElements = (\n  grid: number[][],\n  difficulty: 'Default' | 'Easy' | 'Medium' | 'Hard' | 'Evil' | 'Impossible',\n): number[][] => {\n  let cellsToHide: number;\n  switch (difficulty) {\n    case 'Easy':\n      cellsToHide = 30; // Adjust this number for easy difficulty\n      break;\n    case 'Medium':\n      cellsToHide = 40; // Adjust this number for medium difficulty\n      break;\n    case 'Hard':\n      cellsToHide = 50; // Adjust this number for difficult difficulty\n      break;\n    default:\n      cellsToHide = 60; // Default to easy difficulty\n      break;\n  }\n\n  // Flatten the 2D grid to a 1D array for easier manipulation\n  const flatGrid = grid.flat();\n\n  // Randomly select cells to hide\n  const cellsIndices = shuffleArray(Array.from(Array(81).keys()));\n  for (let i = 0; i < cellsToHide; i++) {\n    flatGrid[cellsIndices[i]] = 0; // Set cell value to 0 (empty)\n  }\n\n  // Convert the modified 1D array back to a 2D grid\n  const modifiedGrid: number[][] = [];\n  for (let i = 0; i < flatGrid.length; i += 9) {\n    modifiedGrid.push(flatGrid.slice(i, i + 9));\n  }\n\n  return modifiedGrid;\n};\n\nexport function createBoard(\n  difficulty: 'Default' | 'Easy' | 'Medium' | 'Hard' | 'Evil' | 'Impossible',\n): {\n  grid: number[][];\n  solution: number[][];\n} {\n  const sudukoBoardEmpty = createRandomCorrectBoard();\n  const grid = hideElements(sudukoBoardEmpty, difficulty);\n  return {grid: grid, solution: sudukoBoardEmpty};\n}\n"],"names":["shiftArray","arr","shiftBy","result","Array","length","i","shuffleArray","array","shuffledArray","j","Math","floor","random","createRandomCorrectBoard","array2D","hideElements","grid","difficulty","cellsToHide","flatGrid","flat","cellsIndices","from","keys","modifiedGrid","push","slice","createBoard","sudukoBoardEmpty","solution"],"mappings":"AAEA,SAASA,UAAUA,CAACC,GAAa,EAAEC,OAAe;EAChD,IAAIC,MAAM,GAAG,IAAIC,KAAK,CAACH,GAAG,CAACI,MAAM,CAAC;EAClC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,GAAG,CAACI,MAAM,EAAEC,CAAC,EAAE,EAAE;IACnCH,MAAM,CAAC,CAACG,CAAC,GAAGJ,OAAO,IAAID,GAAG,CAACI,MAAM,CAAC,GAAGJ,GAAG,CAACK,CAAC,CAAC;;EAE7C,OAAOH,MAAM;AACf;AAEA,SAASI,YAAYA,CAAIC,KAAU;EACjC,MAAMC,aAAa,GAAG,CAAC,GAAGD,KAAK,CAAC;EAChC,KAAK,IAAIF,CAAC,GAAGG,aAAa,CAACJ,MAAM,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACjD,MAAMI,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAIP,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,CAACG,aAAa,CAACH,CAAC,CAAC,EAAEG,aAAa,CAACC,CAAC,CAAC,CAAC,GAAG,CAACD,aAAa,CAACC,CAAC,CAAC,EAAED,aAAa,CAACH,CAAC,CAAC,CAAC;;EAE7E,OAAOG,aAAa;AACtB;AAEA,MAAMK,wBAAwB,GAAGA;EAC/B,IAAIC,OAAO,GAAe,IAAIX,KAAK,CAAC,CAAC,CAAC;EACtCW,OAAO,CAAC,CAAC,CAAC,GAAGR,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAEtD,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1B,IAAIA,CAAC,KAAK,CAAC,IAAIA,CAAC,KAAK,CAAC,EAAE;MAEtBS,OAAO,CAACT,CAAC,CAAC,GAAGN,UAAU,CAACe,OAAO,CAACT,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;KAC3C,MAAM;MAELS,OAAO,CAACT,CAAC,CAAC,GAAGN,UAAU,CAACe,OAAO,CAACT,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;;;EAI9C,OAAOS,OAAO;AAChB,CAAC;AAED,MAAMC,YAAY,GAAGA,CACnBC,IAAgB,EAChBC,UAA0E;EAE1E,IAAIC,WAAmB;EACvB,QAAQD,UAAU;IAChB,KAAK,MAAM;MACTC,WAAW,GAAG,EAAE;MAChB;IACF,KAAK,QAAQ;MACXA,WAAW,GAAG,EAAE;MAChB;IACF,KAAK,MAAM;MACTA,WAAW,GAAG,EAAE;MAChB;IACF;MACEA,WAAW,GAAG,EAAE;MAChB;;EAIJ,MAAMC,QAAQ,GAAGH,IAAI,CAACI,IAAI,EAAE;EAG5B,MAAMC,YAAY,GAAGf,YAAY,CAACH,KAAK,CAACmB,IAAI,CAACnB,KAAK,CAAC,EAAE,CAAC,CAACoB,IAAI,EAAE,CAAC,CAAC;EAC/D,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGa,WAAW,EAAEb,CAAC,EAAE,EAAE;IACpCc,QAAQ,CAACE,YAAY,CAAChB,CAAC,CAAC,CAAC,GAAG,CAAC;;EAI/B,MAAMmB,YAAY,GAAe,EAAE;EACnC,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGc,QAAQ,CAACf,MAAM,EAAEC,CAAC,IAAI,CAAC,EAAE;IAC3CmB,YAAY,CAACC,IAAI,CAACN,QAAQ,CAACO,KAAK,CAACrB,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,CAAC;;EAG7C,OAAOmB,YAAY;AACrB,CAAC;SAEeG,WAAWA,CACzBV,UAA0E;EAK1E,MAAMW,gBAAgB,GAAGf,wBAAwB,EAAE;EACnD,MAAMG,IAAI,GAAGD,YAAY,CAACa,gBAAgB,EAAEX,UAAU,CAAC;EACvD,OAAO;IAACD,IAAI,EAAEA,IAAI;IAAEa,QAAQ,EAAED;GAAiB;AACjD;;;;"}